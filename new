<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Fishing Game</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            text-align: center;
            background-color: #87CEEB;
            transition: background-color 1s ease;
        }

        .button-container {
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
            justify-content: center;
            margin: 20px 0;
        }

        button {
            padding: 12px 20px;
            font-size: 16px;
            font-weight: bold;
            color: white;
            background: linear-gradient(145deg, #0077b6, #0096c7);
            border: none;
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.2s ease-in-out;
        }

        button:hover {
            background: linear-gradient(145deg, #005f8f, #0081a7);
            transform: scale(1.05);
        }

        #fishingArea {
            width: 100%;
            height: 300px;
            background: url('https://www.publicdomainpictures.net/pictures/280000/velka/ocean-background-1554122416ER6.jpg') center/cover;
            border-radius: 10px;
        }

        #status, #coins, #leaderboard {
            font-size: 18px;
            font-weight: bold;
            margin-top: 10px;
        }
    </style>
</head>
<body>
    <h1>Fishing Game üé£</h1>

    <p id="coins">üí∞ Coins: 0</p>
    <p id="fishCaught">üêü Fish Caught: 0</p>

    <div class="button-container">
        <button onclick="game.startFishing()">üé£ Start Fishing</button>
        <button onclick="game.upgradeRod()">‚ö° Upgrade Rod (50 Coins)</button>
        <button onclick="saveGame()">üíæ Save Game</button>
        <button onclick="resetGame()">üîÑ Reset Game</button>
    </div>

    <div id="fishingArea"></div>
    <p id="status">Welcome to the fishing game!</p>

    <h2>üèÜ Leaderboard</h2>
    <p id="leaderboard">- No record yet -</p>

    <script>
        class FishingGame {
            constructor() {
                this.fishCaught = 0;
                this.isFishing = false;
                this.rodLevel = 1;
                this.coins = 0;
                this.fishTypes = [
                    { name: "Salmon", rarity: "Common", value: 5 },
                    { name: "Trout", rarity: "Common", value: 6 },
                    { name: "Tuna", rarity: "Uncommon", value: 10 },
                    { name: "Shark", rarity: "Rare", value: 20 },
                    { name: "Golden Fish", rarity: "Legendary", value: 50 },
                    { name: "Catfish", rarity: "Common", value: 7 },
                    { name: "Bass", rarity: "Common", value: 8 },
                    { name: "Swordfish", rarity: "Rare", value: 25 },
                    { name: "Megalodon", rarity: "Mythical", value: 100 },
                    { name: "Jellyfish", rarity: "Uncommon", value: 12 },
                    { name: "Anglerfish", rarity: "Rare", value: 30 },
                    { name: "Kraken", rarity: "Legendary", value: 200 }
                ];
                this.loadGame();
                this.updateLeaderboard();
            }

            upgradeRod() {
                if (this.rodLevel >= 5) {
                    this.updateStatus("Your fishing rod is at max level!");
                    return;
                }
                if (this.coins >= 50) {
                    this.coins -= 50;
                    this.rodLevel++;
                    this.updateStatus(`Fishing rod upgraded to level ${this.rodLevel}!`);
                    this.updateCoins();
                } else {
                    this.updateStatus("Not enough coins to upgrade!");
                }
            }

            startFishing() {
                if (this.isFishing) {
                    this.updateStatus("You're already fishing!");
                    return;
                }

                this.isFishing = true;
                this.updateStatus("Casting the fishing line... üé£");

                setTimeout(() => {
                    this.catchFish();
                }, Math.random() * 3000 + 2000 - this.rodLevel * 200);
            }

            catchFish() {
                this.isFishing = false;
                let fish = this.getRandomFish();
                this.fishCaught++;
                this.coins += fish.value;
                this.updateStatus(`You caught a ${fish.name} (${fish.rarity})! üí∞ +${fish.value} Coins`);
                this.updateCoins();
                this.updateFishCaught();
                this.updateLeaderboard();
            }

            getRandomFish() {
                let probabilities = [
                    { fish: this.fishTypes[0], chance: 20 },  // Salmon
                    { fish: this.fishTypes[1], chance: 20 },  // Trout
                    { fish: this.fishTypes[2], chance: 15 },  // Tuna
                    { fish: this.fishTypes[3], chance: 8 },   // Shark
                    { fish: this.fishTypes[4], chance: 2 },   // Golden Fish
                    { fish: this.fishTypes[5], chance: 18 },  // Catfish
                    { fish: this.fishTypes[6], chance: 18 },  // Bass
                    { fish: this.fishTypes[7], chance: 5 },   // Swordfish
                    { fish: this.fishTypes[8], chance: 1 },   // Megalodon
                    { fish: this.fishTypes[9], chance: 10 },  // Jellyfish
                    { fish: this.fishTypes[10], chance: 5 },  // Anglerfish
                    { fish: this.fishTypes[11], chance: 0.5 } // Kraken
                ];

                let random = Math.random() * 100;
                let accumulatedChance = 0;

                for (const { fish, chance } of probabilities) {
                    accumulatedChance += chance;
                    if (random <= accumulatedChance) {
                        return fish;
                    }
                }

                return this.fishTypes[0]; // È†êË®≠ËøîÂõûÊúÄÊôÆÈÄöÁöÑÈ≠ö
            }

            updateStatus(message) {
                document.getElementById("status").innerText = message;
            }

            updateCoins() {
                document.getElementById("coins").innerText = `üí∞ Coins: ${this.coins}`;
            }

            updateFishCaught() {
                document.getElementById("fishCaught").innerText = `üêü Fish Caught: ${this.fishCaught}`;
            }

            updateLeaderboard() {
                let bestFish = localStorage.getItem("bestFish") || 0;
                let bestCoins = localStorage.getItem("bestCoins") || 0;

                if (this.fishCaught > bestFish) {
                    localStorage.setItem("bestFish", this.fishCaught);
                    bestFish = this.fishCaught;
                }

                if (this.coins > bestCoins) {
                    localStorage.setItem("bestCoins", this.coins);
                    bestCoins = this.coins;
                }

                document.getElementById("leaderboard").innerHTML = `
                    ü•á Most Fish Caught: ${bestFish}<br>
                    ü•á Highest Coins Earned: ${bestCoins}
                `;
            }
        }

        const game = new FishingGame();
    </script>
</body>
</html>
